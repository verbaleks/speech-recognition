{
  "api": {
    "name": "SpeechRecognitionPlugin",
    "slug": "speechrecognitionplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "available",
        "signature": "() => Promise<{ available: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ available: boolean; }>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "available - boolean true/false for availability"
          }
        ],
        "docs": "This method will check if speech recognition feature is available on the device.",
        "complexTypes": [],
        "slug": "available"
      },
      {
        "name": "start",
        "signature": "(options?: UtteranceOptions | undefined) => Promise<{ matches?: string[]; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UtteranceOptions | undefined"
          }
        ],
        "returns": "Promise<{ matches?: string[] | undefined; }>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "returns",
            "text": "void or array of string results"
          }
        ],
        "docs": "This method will start to listen for utterance.\n\nif `partialResults` is `true`, the function respond directly without result and\nevent `partialResults` will be emit for each partial result, until stopped.",
        "complexTypes": [
          "UtteranceOptions"
        ],
        "slug": "start"
      },
      {
        "name": "stop",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "void"
          }
        ],
        "docs": "This method will stop listening for utterance",
        "complexTypes": [],
        "slug": "stop"
      },
      {
        "name": "getSupportedLanguages",
        "signature": "() => Promise<{ languages: any[]; }>",
        "parameters": [],
        "returns": "Promise<{ languages: any[]; }>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "languages - array string of languages"
          }
        ],
        "docs": "This method will return list of languages supported by the speech recognizer.\n\nIt's not available on Android 13 and newer.",
        "complexTypes": [],
        "slug": "getsupportedlanguages"
      },
      {
        "name": "hasPermission",
        "signature": "() => Promise<{ permission: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ permission: boolean; }>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "permission - boolean true/false if permissions are granted"
          },
          {
            "name": "deprecated",
            "text": "use `checkPermissions()`"
          }
        ],
        "docs": "This method will check for audio permissions.",
        "complexTypes": [],
        "slug": "haspermission"
      },
      {
        "name": "isListening",
        "signature": "() => Promise<{ listening: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ listening: boolean; }>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "boolean true/false if speech recognition is currently listening"
          }
        ],
        "docs": "This method will check if speech recognition is listening.",
        "complexTypes": [],
        "slug": "islistening"
      },
      {
        "name": "requestPermission",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "none"
          },
          {
            "name": "returns",
            "text": "void"
          },
          {
            "name": "deprecated",
            "text": "use `requestPermissions()`"
          }
        ],
        "docs": "This method will prompt the user for audio permission.",
        "complexTypes": [],
        "slug": "requestpermission"
      },
      {
        "name": "checkPermissions",
        "signature": "() => Promise<PermissionStatus>",
        "parameters": [],
        "returns": "Promise<PermissionStatus>",
        "tags": [
          {
            "name": "since",
            "text": "5.0.0"
          }
        ],
        "docs": "Check the speech recognition permission.",
        "complexTypes": [
          "PermissionStatus"
        ],
        "slug": "checkpermissions"
      },
      {
        "name": "requestPermissions",
        "signature": "() => Promise<PermissionStatus>",
        "parameters": [],
        "returns": "Promise<PermissionStatus>",
        "tags": [
          {
            "name": "since",
            "text": "5.0.0"
          }
        ],
        "docs": "Request the speech recognition permission.",
        "complexTypes": [
          "PermissionStatus"
        ],
        "slug": "requestpermissions"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'partialResults', listenerFunc: (data: { matches: string[]; }) => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'partialResults'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: { matches: string[]; }) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "2.0.2"
          }
        ],
        "docs": "Called when partialResults set to true and result received.\n\nOn Android it doesn't work if popup is true.\n\nProvides partial result.",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerpartialresults"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'listeningState', listenerFunc: (data: { status: 'started' | 'stopped'; }) => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'listeningState'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(data: { status: 'started' | 'stopped'; }) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "6.0.0"
          }
        ],
        "docs": "Called when listening state changed.",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerlisteningstate"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Remove all the listeners that are attached to this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "UtteranceOptions",
      "slug": "utteranceoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "language",
          "tags": [],
          "docs": "key returned from `getSupportedLanguages()`",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "maxResults",
          "tags": [],
          "docs": "maximum number of results to return (5 is max)",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "prompt",
          "tags": [],
          "docs": "prompt message to display on popup (Android only)",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "popup",
          "tags": [],
          "docs": "display popup window when listening for utterance (Android only)",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "partialResults",
          "tags": [],
          "docs": "return partial results if found",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "PermissionStatus",
      "slug": "permissionstatus",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "speechRecognition",
          "tags": [
            {
              "text": "5.0.0",
              "name": "since"
            }
          ],
          "docs": "Permission state for speechRecognition alias.\n\nOn Android it requests/checks RECORD_AUDIO permission\n\nOn iOS it requests/checks the speech recognition and microphone permissions.",
          "complexTypes": [
            "PermissionState"
          ],
          "type": "PermissionState"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "PermissionState",
      "slug": "permissionstate",
      "docs": "",
      "types": [
        {
          "text": "'prompt'",
          "complexTypes": []
        },
        {
          "text": "'prompt-with-rationale'",
          "complexTypes": []
        },
        {
          "text": "'granted'",
          "complexTypes": []
        },
        {
          "text": "'denied'",
          "complexTypes": []
        }
      ]
    }
  ],
  "pluginConfigs": []
}