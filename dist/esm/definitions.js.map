{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport interface PermissionStatus {\n  /**\n   * Permission state for speechRecognition alias.\n   *\n   * On Android it requests/checks RECORD_AUDIO permission\n   *\n   * On iOS it requests/checks the speech recognition and microphone permissions.\n   *\n   * @since 5.0.0\n   */\n  speechRecognition: PermissionState;\n}\n\nexport interface SpeechRecognitionPlugin {\n  /**\n   * This method will check if speech recognition feature is available on the device.\n   * @param none\n   * @returns available - boolean true/false for availability\n   */\n  available(): Promise<{ available: boolean }>;\n  /**\n   * This method will start to listen for utterance.\n   *\n   * if `partialResults` is `true`, the function respond directly without result and\n   * event `partialResults` will be emit for each partial result, until stopped.\n   *\n   * @param options\n   * @returns void or array of string results\n   */\n  start(options?: UtteranceOptions): Promise<{ matches?: string[] }>;\n  /**\n   * This method will stop listening for utterance\n   * @param none\n   * @returns void\n   */\n  stop(): Promise<void>;\n  /**\n   * This method will return list of languages supported by the speech recognizer.\n   *\n   * It's not available on Android 13 and newer.\n   *\n   * @param none\n   * @returns languages - array string of languages\n   */\n  getSupportedLanguages(): Promise<{ languages: any[] }>;\n  /**\n   * This method will check for audio permissions.\n   * @param none\n   * @returns permission - boolean true/false if permissions are granted\n   *\n   * @deprecated use `checkPermissions()`\n   */\n  hasPermission(): Promise<{ permission: boolean }>;\n\n  /**\n   * This method will check if speech recognition is listening.\n   * @param none\n   * @returns boolean true/false if speech recognition is currently listening\n   */\n  isListening(): Promise<{ listening: boolean }>;\n  /**\n   * This method will prompt the user for audio permission.\n   * @param none\n   * @returns void\n   *\n   * @deprecated use `requestPermissions()`\n   */\n  requestPermission(): Promise<void>;\n  /**\n   * Check the speech recognition permission.\n   *\n   * @since 5.0.0\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Request the speech recognition permission.\n   *\n   * @since 5.0.0\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n  /**\n   * Called when partialResults set to true and result received.\n   *\n   * On Android it doesn't work if popup is true.\n   *\n   * Provides partial result.\n   *\n   * @since 2.0.2\n   */\n  addListener(\n    eventName: 'partialResults',\n    listenerFunc: (data: { matches: string[] }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Called when listening state changed.\n   *\n   * @since 6.0.0\n   */\n  addListener(\n    eventName: 'listeningState',\n    listenerFunc: (data: { status: 'started' | 'stopped' }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Remove all the listeners that are attached to this plugin.\n   *\n   * @since 4.0.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface UtteranceOptions {\n  /**\n   * key returned from `getSupportedLanguages()`\n   */\n  language?: string;\n  /**\n   * maximum number of results to return (5 is max)\n   */\n  maxResults?: number;\n  /**\n   * prompt message to display on popup (Android only)\n   */\n  prompt?: string;\n  /**\n   * display popup window when listening for utterance (Android only)\n   */\n  popup?: boolean;\n  /**\n   * return partial results if found\n   */\n  partialResults?: boolean;\n}\n"]}